digraph "Ra::Core::Utils::AttribManager"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Ra::Core::Utils::AttribManager\n||+ AttribManager()\l+ AttribManager()\l+ operator=()\l+ AttribManager()\l+ operator=()\l+ ~AttribManager()\l+ copyAttributes()\l+ copyAttributes()\l+ copyAllAttributes()\l+ clear()\l+ isValid()\l+ contains()\l+ findAttrib()\l+ getDataWithLock()\l+ getData()\l+ unlock()\l+ addAttrib()\l+ removeAttrib()\l+ hasSameAttribs()\l+ getNumAttribs()\l+ getScopedLockState()\l+ getAttrib()\l+ getAttrib()\l+ getAttribPtr()\l+ getAttribPtr()\l+ getAttrib()\l+ getAttrib()\l+ getAttribBase()\l+ getAttribBase()\l+ getAttribBase()\l+ getAttribBase()\l+ setAttrib()\l+ setAttrib()\l+ for_each_attrib()\l+ for_each_attrib()\l* getAttrib()\l* getAttrib()\l* getAttribPtr()\l* getAttribPtr()\l* getAttrib()\l* getAttrib()\l* getAttribBase()\l* getAttribBase()\l* getAttribBase()\l* getAttribBase()\l* setAttrib()\l* setAttrib()\l* for_each_attrib()\l* for_each_attrib()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="The AttribManager provides attributes management by handles."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Ra::Core::Utils::Observable\l\< const std::string & \>\n||+ Observable()\l+ Observable()\l+ operator=()\l+ ~Observable()\l+ copyObserversTo()\l+ attach()\l+ attachMember()\l+ notify()\l+ detachAll()\l+ detach()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Core_1_1Utils_1_1Observable.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="orange",fontsize="10",style="solid",label=" \< const std::string & \>" ,fontname="Helvetica"];
  Node3 [label="{Ra::Core::Utils::Observable\l\< Args \>\n||+ Observable()\l+ Observable()\l+ operator=()\l+ ~Observable()\l+ copyObserversTo()\l+ attach()\l+ attachMember()\l+ notify()\l+ detachAll()\l+ detach()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Core_1_1Utils_1_1Observable.html",tooltip=" "];
}
