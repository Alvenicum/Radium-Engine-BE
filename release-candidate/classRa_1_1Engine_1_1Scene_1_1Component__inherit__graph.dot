digraph "Ra::Engine::Scene::Component"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Ra::Engine::Scene::\lComponent\n|+ m_renderObjects\l# m_name\l# m_entity\l# m_system\l|+ Component()\l+ ~Component()\l+ initialize()\l+ setEntity()\l+ getEntity()\l+ getName()\l+ setSystem()\l+ getSystem()\l+ addRenderObject()\l+ removeRenderObject()\l+ canEdit()\l+ getTransform()\l+ setTransform()\l+ notifyRenderObjectExpired()\l+ computeAabb()\l+ invalidateAabb()\l+ getRenderObjects()\l# getRoMgr()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A component is an element that can be updated by a system. It is also linked to some other components..."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Ra::Engine::Scene::\lCameraComponent\n|# m_camera\l# m_RO\l|+ CameraComponent()\l+ ~CameraComponent()\l+ initialize()\l+ show()\l+ updateTransform()\l+ duplicate()\l+ getCamera()\l+ getCamera()\l+ getRenderObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1CameraComponent.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Ra::Engine::Scene::\lDebugComponent\n||+ DebugComponent()\l+ initialize()\l+ getRenderObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1DebugComponent.html",tooltip="Component for debug drawing."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Ra::Engine::Scene::\lGeometryComponent\n|# m_roIndex\l# m_contentName\l|+ GeometryComponent()\l+ ~GeometryComponent()\l+ initialize()\l+ setupIO()\l+ setContentName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1GeometryComponent.html",tooltip="Abstract interface of a geometric compoennet in the Engine."];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{Ra::Engine::Scene::\lPointCloudComponent\n||+ PointCloudComponent()\l+ PointCloudComponent()\l+ ~PointCloudComponent()\l+ initialize()\l+ getCoreGeometry()\l+ getGeometry()\l+ setSplatSize()\l+ getSplatSize()\l+ setupIO()\l+ setDeformable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1PointCloudComponent.html",tooltip=" "];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{Ra::Engine::Scene::\lSurfaceMeshComponent\l\< CoreMeshType \>\n||+ SurfaceMeshComponent()\l+ SurfaceMeshComponent()\l+ ~SurfaceMeshComponent()\l+ getCoreGeometry()\l+ getDisplayable()\l+ setupIO()\l+ setDeformable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1SurfaceMeshComponent.html",tooltip="Main class to convert Ra::Core::Asset::GeometryData to Ra::Engine::Mesh."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{Ra::Engine::Scene::\lLight\n||+ Light()\l+ ~Light()\l+ getColor()\l+ setColor()\l+ setDirection()\l+ setPosition()\l+ getType()\l+ getRenderParameters()\l+ getShaderInclude()\l+ initialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1Light.html",tooltip=" "];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{Ra::Engine::Scene::\lDirectionalLight\n||+ DirectionalLight()\l+ ~DirectionalLight()\l+ getRenderParameters()\l+ setDirection()\l+ getDirection()\l+ getShaderInclude()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1DirectionalLight.html",tooltip=" "];
  Node7 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{Ra::Engine::Scene::\lPointLight\n||+ PointLight()\l+ ~PointLight()\l+ getRenderParameters()\l+ setPosition()\l+ getPosition()\l+ setAttenuation()\l+ setAttenuation()\l+ getAttenuation()\l+ getShaderInclude()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1PointLight.html",tooltip=" "];
  Node7 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{Ra::Engine::Scene::\lSpotLight\n||+ SpotLight()\l+ ~SpotLight()\l+ getRenderParameters()\l+ setPosition()\l+ getPosition()\l+ setDirection()\l+ getDirection()\l+ setInnerAngleInRadians()\l+ setOuterAngleInRadians()\l+ setInnerAngleInDegrees()\l+ setOuterAngleInDegrees()\l+ getInnerAngle()\l+ getOuterAngle()\l+ setAttenuation()\l+ setAttenuation()\l+ getAttenuation()\l+ getShaderInclude()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1SpotLight.html",tooltip=" "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{Ra::Engine::Scene::\lSkeletonComponent\n||+ SkeletonComponent()\l+ ~SkeletonComponent()\l+ SkeletonComponent()\l+ operator=()\l+ initialize()\l+ canEdit()\l+ getTransform()\l+ setTransform()\l+ handleSkeletonLoading()\l+ handleAnimationLoading()\l+ getSkelName()\l+ setSkeleton()\l+ getSkeleton()\l+ getAnimationCount()\l+ getAnimation()\l+ getAnimation()\l+ addNewAnimation()\l+ removeAnimation()\l+ useAnimation()\l+ getAnimationId()\l+ update()\l+ getAnimationTime()\l+ getAnimationTimeInterval()\l+ setSpeed()\l+ getSpeed()\l+ autoRepeat()\l+ isAutoRepeat()\l+ pingPong()\l+ isPingPong()\l+ setXray()\l+ isXray()\l+ toggleSkeleton()\l+ isShowingSkeleton()\l+ getBoneRO2idx()\l+ updateDisplay()\l+ setManipulationScheme()\l+ getManipulationScheme()\l* initialize()\l* canEdit()\l* getTransform()\l* setTransform()\l* handleSkeletonLoading()\l* handleAnimationLoading()\l* getSkelName()\l* setSkeleton()\l* getSkeleton()\l* getAnimationCount()\l* getAnimation()\l* getAnimation()\l* addNewAnimation()\l* removeAnimation()\l* useAnimation()\l* getAnimationId()\l* update()\l* getAnimationTime()\l* getAnimationTimeInterval()\l* setSpeed()\l* getSpeed()\l* autoRepeat()\l* isAutoRepeat()\l* pingPong()\l* isPingPong()\l* setXray()\l* isXray()\l* toggleSkeleton()\l* isShowingSkeleton()\l* getBoneRO2idx()\l* updateDisplay()\l* setManipulationScheme()\l* getManipulationScheme()\l* setupIO()\l* getRefPoseOutput()\l* getAnimationOutput()\l* getTimeOutput()\l* getWasReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1SkeletonComponent.html",tooltip=" "];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{Ra::Engine::Scene::\lSkinningComponent\n||+ SkinningComponent()\l+ ~SkinningComponent()\l+ initialize()\l+ handleSkinDataLoading()\l+ skin()\l+ endSkinning()\l+ setSkinningType()\l+ getSkinningType()\l+ setNormalSkinning()\l+ getNormalSkinning()\l+ getMeshName()\l+ getSkeletonName()\l+ getSkinningRefData()\l+ getSkinningFrameData()\l+ showWeights()\l+ isShowingWeights()\l+ showWeightsType()\l+ getWeightsType()\l+ setWeightBone()\l* initialize()\l* handleSkinDataLoading()\l* skin()\l* endSkinning()\l* setSkinningType()\l* getSkinningType()\l* setNormalSkinning()\l* getNormalSkinning()\l* getMeshName()\l* getSkeletonName()\l* getSkinningRefData()\l* getSkinningFrameData()\l* showWeights()\l* isShowingWeights()\l* showWeightsType()\l* getWeightsType()\l* setWeightBone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1SkinningComponent.html",tooltip="The SkinningComponent class is responsible for applying Geometric Skinning Methods on an animated obj..."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{Ra::Engine::Scene::\lUiComponent\n||+ UiComponent()\l+ initialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1UiComponent.html",tooltip="Component for UI drawing."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{Ra::Engine::Scene::\lVolumeComponent\n||+ VolumeComponent()\l+ ~VolumeComponent()\l+ initialize()\l+ setupIO()\l+ setContentName()\l+ getRenderObjectIndex()\l+ getDisplayVolume()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1VolumeComponent.html",tooltip="Main class to convert Ra::Core::Asset::VolumeData to Ra::Engine::VolumeObject."];
}
