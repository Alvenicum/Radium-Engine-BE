digraph "Ra::Core::Geometry::AttribArrayGeometry"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Ra::Core::Geometry\l::AttribArrayGeometry\n||+ AttribArrayGeometry()\l+ AttribArrayGeometry()\l+ AttribArrayGeometry()\l+ operator=()\l+ operator=()\l+ ~AttribArrayGeometry()\l+ append()\l+ clear()\l+ setVertices()\l+ setVertices()\l+ vertices()\l+ setNormals()\l+ setNormals()\l+ normals()\l+ getAttribHandle()\l+ isValid()\l+ hasAttrib()\l+ removeAttrib()\l+ clearAttributes()\l+ copyBaseGeometry()\l+ copyAttributes()\l+ copyAllAttributes()\l+ computeAabb()\l+ colorize()\l+ vertexAttribs()\l+ vertexAttribs()\l+ verticesWithLock()\l+ verticesUnlock()\l+ normalsWithLock()\l+ normalsUnlock()\l+ getAttrib()\l+ getAttrib()\l+ getAttrib()\l+ getAttrib()\l+ getAttribPtr()\l+ getAttribPtr()\l+ getAttribBase()\l+ getAttribBase()\l+ addAttrib()\l+ addAttrib()\l+ addAttrib()\l* getAttrib()\l* getAttrib()\l* getAttrib()\l* getAttrib()\l* getAttribPtr()\l* getAttribPtr()\l* getAttribBase()\l* getAttribBase()\l* addAttrib()\l* addAttrib()\l* addAttrib()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This class represents vertex + attributes per vertex. Toplogy is handled in MultiIndexedGeometry subc..."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Ra::Core::Geometry\l::AbstractGeometry\n||+ ~AbstractGeometry()\l+ AbstractGeometry()\l+ AbstractGeometry()\l+ operator=()\l+ clear()\l+ computeAabb()\l+ getAabbObservable()\l# isAabbValid()\l# getAabb()\l# invalidateAabb()\l# setAabb()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structRa_1_1Core_1_1Geometry_1_1AbstractGeometry.html",tooltip=" "];
}
