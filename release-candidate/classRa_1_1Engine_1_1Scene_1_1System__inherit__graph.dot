digraph "Ra::Engine::Scene::System"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Ra::Engine::Scene::\lSystem\n|# m_components\l|+ System()\l+ ~System()\l+ handleAssetLoading()\l+ generateTasks()\l+ getEntityComponents()\l+ addComponent()\l# registerComponent()\l# unregisterComponent()\l# unregisterAllComponents()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Ra::Engine::Scene::\lCameraManager\n|+ defaultCamera\l# m_data\l# m_activeCamera\l# m_activeIndex\l# m_activeCameraObservers\l|+ CameraManager()\l+ CameraManager()\l+ operator=()\l+ ~CameraManager()\l+ getCamera()\l+ addCamera()\l+ getCameraIndex()\l+ initialize()\l+ activate()\l+ updateActiveCameraData()\l+ count()\l+ generateTasks()\l+ handleAssetLoading()\l+ getActiveCamera()\l+ getActiveCameraIndex()\l+ resetActiveCamera()\l+ activeCameraObservers()\l# registerComponent()\l# unregisterComponent()\l# unregisterAllComponents()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1CameraManager.html",tooltip=" "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Ra::Engine::Scene::\lDefaultCameraManager\n||+ DefaultCameraManager()\l+ getCamera()\l+ addCamera()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1DefaultCameraManager.html",tooltip="DefaultCameraManager. A simple Camera Manager with a list of Cameras."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Ra::Engine::Scene::\lLightManager\n|# m_data\l|+ LightManager()\l+ LightManager()\l+ operator=()\l+ ~LightManager()\l+ getLight()\l+ addLight()\l+ count()\l+ generateTasks()\l+ handleAssetLoading()\l# registerComponent()\l# unregisterComponent()\l# unregisterAllComponents()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1LightManager.html",tooltip=" "];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{Ra::Engine::Scene::\lDefaultLightManager\n||+ DefaultLightManager()\l+ getLight()\l+ addLight()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1DefaultLightManager.html",tooltip="DefaultLightManager. A simple Light Manager with a list of lights."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{Ra::Engine::Scene::\lSkeletonBasedAnimationSystem\n||+ SkeletonBasedAnimationSystem()\l+ ~SkeletonBasedAnimationSystem()\l+ SkeletonBasedAnimationSystem()\l+ operator=()\l+ enforceUpdate()\l+ generateTasks()\l+ handleAssetLoading()\l+ setXray()\l+ isXrayOn()\l+ toggleSkeleton()\l* generateTasks()\l* handleAssetLoading()\l* setXray()\l* isXrayOn()\l* toggleSkeleton()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1SkeletonBasedAnimationSystem.html",tooltip=" "];
}
