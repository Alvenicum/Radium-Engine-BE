digraph "Ra::Core::Utils::IndexedObject"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Ra::Core::Utils::Indexed\lObject\n|# m_idx\l|+ IndexedObject()\l+ IndexedObject()\l+ ~IndexedObject()\l+ setIndex()\l+ getIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Ra::Engine::Rendering\l::RenderObject\n||+ RenderObject()\l+ ~RenderObject()\l+ updateGL()\l+ hasBeenRenderedOnce()\l+ hasExpired()\l+ setLifetime()\l+ render()\l+ render()\l+ invalidateAabb()\l+ getName()\l+ getComponent()\l+ getComponent()\l+ getType()\l+ setType()\l+ setVisible()\l+ toggleVisible()\l+ isVisible()\l+ setPickable()\l+ togglePickable()\l+ isPickable()\l+ setXRay()\l+ toggleXRay()\l+ isXRay()\l+ setTransparent()\l+ toggleTransparent()\l+ isTransparent()\l+ setColoredByVertexAttrib()\l+ toggleColoredByVertexAttrib()\l+ isColoredByVertexAttrib()\l+ isDirty()\l+ setRenderTechnique()\l+ getRenderTechnique()\l+ getRenderTechnique()\l+ setMaterial()\l+ getMaterial()\l+ getMaterial()\l+ setMesh()\l+ getMesh()\l+ getMesh()\l+ getTransform()\l+ getTransformAsMatrix()\l+ computeAabb()\l+ setLocalTransform()\l+ setLocalTransform()\l+ getLocalTransform()\l+ getLocalTransformAsMatrix()\l+ createRenderObject()\l* getName()\l* getComponent()\l* getComponent()\l* getType()\l* setType()\l* setVisible()\l* toggleVisible()\l* isVisible()\l* setPickable()\l* togglePickable()\l* isPickable()\l* setXRay()\l* toggleXRay()\l* isXRay()\l* setTransparent()\l* toggleTransparent()\l* isTransparent()\l* setColoredByVertexAttrib()\l* toggleColoredByVertexAttrib()\l* isColoredByVertexAttrib()\l* isDirty()\l* setRenderTechnique()\l* getRenderTechnique()\l* getRenderTechnique()\l* setMaterial()\l* getMaterial()\l* getMaterial()\l* setMesh()\l* getMesh()\l* getMesh()\l* getTransform()\l* getTransformAsMatrix()\l* computeAabb()\l* setLocalTransform()\l* setLocalTransform()\l* getLocalTransform()\l* getLocalTransformAsMatrix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Rendering_1_1RenderObject.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Ra::Engine::Scene::\lEntity\n||+ Entity()\l+ Entity()\l+ operator=()\l+ ~Entity()\l+ getName()\l+ rename()\l+ setTransform()\l+ setTransform()\l+ getTransform()\l+ getTransformAsMatrix()\l+ swapTransformBuffers()\l+ transformationObservers()\l+ addComponent()\l+ removeComponent()\l+ getComponent()\l+ getComponent()\l+ getComponents()\l+ getNumComponents()\l+ computeAabb()\l+ invalidateAabb()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1Entity.html",tooltip="An entity is an scene element. It ties together components with a transform."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Ra::Engine::Scene::\lSystemEntity\n||+ SystemEntity()\l+ ~SystemEntity()\l+ dbgCmp()\l+ uiCmp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Scene_1_1SystemEntity.html",tooltip=" "];
}
