digraph "Ra::Gui::BaseApplication"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Ra::Gui::BaseApplication\n|+ m_mainWindow\l+ m_engine\l+ m_taskQueue\l+ m_targetFPS\l# m_openGLPlugins\l# m_frameTimer\l# m_lastFrameStart\l# m_frameCounter\l# m_frameCountBeforeUpdate\l# m_numFrames\l# m_maxThreads\l# m_timerData\l# m_pluginPath\l# m_realFrameRate\l# m_exportFoldername\l# m_recordFrames\l# m_recordTimings\l# m_recordGraph\l# m_isAboutToQuit\l# m_isUpdateNeeded\l# m_continuousUpdateRequest\l# m_parser\l# m_loadedPlugins\l|+ BaseApplication()\l+ ~BaseApplication()\l+ initialize()\l+ engineBaseInitialization()\l+ addApplicationExtension()\l+ radiumFrame()\l+ isRunning()\l+ getEngine()\l+ getFrameCount()\l+ getExportFolderName()\l+ addPluginDirectory()\l+ clearPluginDirectories()\l+ editSettings()\l+ getHelpText()\l+ addRadiumMenu()\l+ engineOpenGLInitialize()\l+ initializeGl()\l+ updateRadiumFrameIfNeeded()\l+ loadFile()\l+ framesCountForStatsChanged()\l+ appNeedsToQuit()\l+ setRealFrameRate()\l+ setRecordFrames()\l+ setRecordTimings()\l+ setRecordGraph()\l+ recordFrame()\l+ onSelectedItem()\l+ setContinuousUpdate()\l+ askForUpdate()\l# createConnections()\l# loadPlugins()\l# setupScene()\l# isUpdateNeeded()\l# setIsUpdateNeeded()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This class contains the main application logic. It owns the engine and the GUI."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #m_viewer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{Ra::Gui::Viewer\n|# m_renderers\l# m_pendingRenderers\l# m_pickingManager\l# m_isBrushPickingEnabled\l# m_brushRadius\l# m_camera\l# m_customKeyActions\l# m_activeContext\l|+ Viewer()\l+ ~Viewer()\l+ setupKeyMappingCallbacks()\l+ prepareDisplay()\l+ getContext()\l+ setCameraManipulator()\l+ getCameraManipulator()\l+ resetToDefaultCamera()\l+ getGizmoManager()\l+ getRenderer()\l+ getRenderer()\l+ addRenderer()\l+ getPickingManager()\l+ update()\l+ startRendering()\l+ swapBuffers()\l+ getDepthUnderMouse()\l+ processPicking()\l+ fitCameraToScene()\l+ fitCamera()\l+ getRenderersName()\l+ grabFrame()\l+ enableDebug()\l+ getBackgroundColor()\l+ addKeyPressEventAction()\l+ addKeyReleaseEventAction()\l+ reloadShaders()\l+ displayTexture()\l+ changeRenderer()\l+ enablePostProcess()\l+ enableDebugDraw()\l+ setBackgroundColor()\l+ displayHelpDialog()\l# createGizmoManager()\l# initializeRenderer()\l# initializeGL()\l# resizeGL()\l# getPickingMode()\l# showEvent()\l# focusOutEvent()\l# keyPressEvent()\l# keyReleaseEvent()\l# mousePressEvent()\l# mouseReleaseEvent()\l# mouseMoveEvent()\l# wheelEvent()\l# handleKeyPressEvent()\l# handleKeyReleaseEvent()\l# handleMousePressEvent()\l# handleMouseReleaseEvent()\l# handleMouseMoveEvent()\l# handleWheelEvent()\l* processPicking()\l* fitCameraToScene()\l* fitCamera()\l* getRenderersName()\l* grabFrame()\l* enableDebug()\l* getBackgroundColor()\l* addKeyPressEventAction()\l* addKeyReleaseEventAction()\l* keyPressEvent()\l* keyReleaseEvent()\l* mousePressEvent()\l* mouseReleaseEvent()\l* mouseMoveEvent()\l* wheelEvent()\l* handleKeyPressEvent()\l* handleKeyReleaseEvent()\l* handleMousePressEvent()\l* handleMouseReleaseEvent()\l* handleMouseMoveEvent()\l* handleWheelEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Gui_1_1Viewer.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Ra::Gui::WindowQt\n|# m_context\l# m_updatePending\l# m_glInitialized\l|+ WindowQt()\l+ ~WindowQt()\l+ resizeEvent()\l+ showEvent()\l+ exposeEvent()\l+ enterEvent()\l+ leaveEvent()\l+ makeCurrent()\l+ doneCurrent()\l+ activateScopedContext()\l+ context()\l+ isOpenGlInitialized()\l+ cleanupGL()\l+ screenChanged()\l# initialize()\l# resizeInternal()\l# initializeGL()\l# deinitializeGL()\l# resizeGL()\l# getProcAddress()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Gui_1_1WindowQt.html",tooltip="Base class for OpenGL widgets, compatble with Qt and globjects/glbindings."];
  Node4 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Ra::Gui::KeyMappingManageable\l\< Viewer \>\n||+ getContext()\l+ configureKeyMapping()\l# self()\l# setContext()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Gui_1_1KeyMappingManageable.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Viewer \>" ,fontname="Helvetica"];
  Node5 [label="{Ra::Gui::KeyMappingManageable\< T \>\n||+ getContext()\l+ configureKeyMapping()\l# self()\l# setContext()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Gui_1_1KeyMappingManageable.html",tooltip=" "];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_currentRenderer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{Ra::Engine::Rendering\l::Renderer\n|# m_width\l# m_height\l# m_renderObjectManager\l# m_lightmanagers\l# m_renderQueuesUpToDate\l# m_fancyRenderObjects\l# m_debugRenderObjects\l# m_xrayRenderObjects\l# m_uiRenderObjects\l# m_quadMesh\l# m_drawDebug\l# m_wireframe\l# m_postProcessEnabled\l# m_depthTexture\l# m_fancyTexture\l# m_secondaryTextures\l|+ Renderer()\l+ ~Renderer()\l+ getTimerData()\l+ getDisplayTexture()\l+ lockRendering()\l+ unlockRendering()\l+ toggleWireframe()\l+ enableWireframe()\l+ toggleDrawDebug()\l+ enableDebugDraw()\l+ enablePostProcess()\l+ render()\l+ initialize()\l+ resize()\l+ addPickingRequest()\l+ getPickingResults()\l+ getPickingQueries()\l+ setMousePosition()\l+ setBrushRadius()\l+ hasLight()\l+ setBackgroundColor()\l+ getBackgroundColor()\l+ addLight()\l+ reloadShaders()\l+ displayTexture()\l+ getAvailableTextures()\l+ getRendererName()\l+ buildRenderTechnique()\l+ buildAllRenderTechniques()\l+ grabFrame()\l+ doPickingNow()\l# initializeInternal()\l# resizeInternal()\l# updateStepInternal()\l# renderInternal()\l# postProcessInternal()\l# debugInternal()\l# uiInternal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Rendering_1_1Renderer.html",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #m_shaderProgramManager" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{Ra::Engine::Data::Shader\lProgramManager\n||+ ShaderProgramManager()\l+ ~ShaderProgramManager()\l+ ShaderProgramManager()\l+ operator=()\l+ addShaderProgram()\l+ getShaderProgram()\l+ getShaderProgram()\l+ reloadAllShaderPrograms()\l+ reloadNotCompiledShaderPrograms()\l+ addNamedString()\l+ reloadNamedString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Data_1_1ShaderProgramManager.html",tooltip=" "];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #m_displayedTexture" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{Ra::Engine::Data::Texture\n||+ Texture()\l+ operator=()\l+ Texture()\l+ ~Texture()\l+ initializeGL()\l+ bind()\l+ bindImageTexture()\l+ getName()\l+ updateData()\l+ updateParameters()\l+ linearize()\l+ format()\l+ width()\l+ height()\l+ depth()\l+ texels()\l+ texture()\l+ resize()\l+ getParameters()\l+ getParameters()\l+ setParameters()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1Data_1_1Texture.html",tooltip=" "];
  Node9 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_gizmoManager" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{Ra::Gui::GizmoManager\n||+ GizmoManager()\l+ ~GizmoManager()\l+ handleMousePressEvent()\l+ handleMouseReleaseEvent()\l+ handleMouseMoveEvent()\l+ setEditable()\l+ cleanup()\l+ handlePickingResult()\l+ setLocal()\l+ changeGizmoType()\l+ updateValues()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Gui_1_1GizmoManager.html",tooltip=" "];
  Node10 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{Ra::Gui::KeyMappingManageable\l\< GizmoManager \>\n||+ getContext()\l+ configureKeyMapping()\l# self()\l# setContext()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Gui_1_1KeyMappingManageable.html",tooltip=" "];
  Node5 -> Node10 [dir="back",color="orange",fontsize="10",style="solid",label=" \< GizmoManager \>" ,fontname="Helvetica"];
  Node11 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_backgroundColor" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{Ra::Core::Utils::ColorBase\l\< Scalar \>\n||+ ColorBase()\l+ ColorBase()\l+ ColorBase()\l+ ColorBase()\l+ operator VectorType()\l+ rgb()\l+ rgb()\l+ alpha()\l+ alpha()\l+ hasValidAlpha()\l+ toRGBA32()\l+ toARGB32()\l+ sRGBToLinearRGB()\l+ linearRGBTosRGB()\l+ fromRGB()\l+ Alpha()\l+ Black()\l+ Red()\l+ Green()\l+ Blue()\l+ Yellow()\l+ Magenta()\l+ Cyan()\l+ White()\l+ Grey()\l+ Skin()\l+ getNamedColor()\l+ fromChars()\l+ fromRGB24()\l+ fromRGBA32()\l+ fromARGB32()\l+ fromHSV()\l+ scatter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Core_1_1Utils_1_1ColorBase.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Scalar \>" ,fontname="Helvetica"];
  Node12 [label="{Ra::Core::Utils::ColorBase\l\< _Scalar \>\n||+ ColorBase()\l+ ColorBase()\l+ ColorBase()\l+ ColorBase()\l+ operator VectorType()\l+ rgb()\l+ rgb()\l+ alpha()\l+ alpha()\l+ hasValidAlpha()\l+ toRGBA32()\l+ toARGB32()\l+ sRGBToLinearRGB()\l+ linearRGBTosRGB()\l+ fromRGB()\l+ Alpha()\l+ Black()\l+ Red()\l+ Green()\l+ Blue()\l+ Yellow()\l+ Magenta()\l+ Cyan()\l+ White()\l+ Grey()\l+ Skin()\l+ getNamedColor()\l+ fromChars()\l+ fromRGB24()\l+ fromRGBA32()\l+ fromARGB32()\l+ fromHSV()\l+ scatter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Core_1_1Utils_1_1ColorBase.html",tooltip=" "];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #m_pluginContext" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{Ra::Plugins::Context\n|+ m_selectionManager\l+ m_pickingManager\l+ m_exportDir\l|+ Context()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Plugins_1_1Context.html",tooltip="Data passed to the plugin constructor."];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +m_engine" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{Ra::Engine::RadiumEngine\n||+ RadiumEngine()\l+ ~RadiumEngine()\l+ initialize()\l+ initializeGL()\l+ getOpenGLVersion()\l+ cleanup()\l+ getTasks()\l+ registerSystem()\l+ getSystem()\l+ getMesh()\l+ loadFile()\l+ getFileData()\l+ releaseFile()\l+ endFrameSync()\l+ getRenderObjectManager()\l+ getEntityManager()\l+ getSignalManager()\l+ getTextureManager()\l+ getShaderProgramManager()\l+ registerFileLoader()\l+ getFileLoaders()\l+ computeSceneAabb()\l+ pushFboAndViewport()\l+ popFboAndViewport()\l+ getResourcesDir()\l+ setRealTime()\l+ isRealTime()\l+ isConstantTime()\l+ setConstantTimeStep()\l+ setForwardBackward()\l+ play()\l+ step()\l+ resetTime()\l+ setTime()\l+ setStartTime()\l+ getStartTime()\l+ setEndTime()\l+ getEndTime()\l+ getTime()\l+ getFrame()\l* setRealTime()\l* isRealTime()\l* isConstantTime()\l* setConstantTimeStep()\l* setForwardBackward()\l* play()\l* step()\l* resetTime()\l* setTime()\l* setStartTime()\l* getStartTime()\l* setEndTime()\l* getEndTime()\l* getTime()\l* getFrame()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Engine_1_1RadiumEngine.html",tooltip=" "];
  Node15 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +m_timeline" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{Ra::Gui::Timeline\n||+ Timeline()\l+ ~Timeline()\l+ selectionChanged()\l+ registerKeyFramedValue()\l+ unregisterKeyFramedValue()\l+ registerKeyFramedValue()\l+ unregisterKeyFramedValue()\l+ registerKeyFramedValue()\l+ unregisterKeyFramedValue()\l+ getTime()\l+ detachFromEngine()\l+ onChangeStart()\l+ onChangeEnd()\l+ onChangeDuration()\l+ onChangeCursor()\l+ onSetPlay()\l# resizeEvent()\l* m_entityAddObserverId\l* m_entityRemoveObserverId\l* m_roAddObserverId\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRa_1_1Gui_1_1Timeline.html",tooltip="The Timeline class provides display and management of time, as well as keyframes."];
  Node2 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +m_viewer" ,arrowhead="odiamond",fontname="Helvetica"];
}
